#!/bin/bash

# Inicializa√ß√£o do projeto Multiple Agents IA
# Script para configurar e iniciar o sistema

echo "üöÄ Iniciando Multiple Agents IA System"
echo "======================================"

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    exit 1
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null; then
    echo "‚ùå Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Detectar se √© Docker Compose v1 ou v2
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    echo "‚ùå Docker Compose n√£o foi encontrado. Verifique se est√° instalado."
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando a partir do .env.example..."
    cp .env.example .env
    echo "‚úÖ Arquivo .env criado. Configure as vari√°veis de ambiente antes de continuar."
    echo "üìù Editando .env..."
    
    # Gerar JWT secret aleat√≥rio
    JWT_SECRET=$(openssl rand -base64 32)
    sed -i "s/your-super-secret-jwt-key-here/$JWT_SECRET/" .env
    
    echo "‚úÖ JWT Secret gerado automaticamente."
    echo "‚ö†Ô∏è  Configure sua OpenAI API Key no arquivo .env se necess√°rio."
fi

# Criar diret√≥rio de logs se n√£o existir
mkdir -p logs

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
npm install

# Construir e iniciar containers
echo "üê≥ Construindo containers Docker..."
$DOCKER_COMPOSE_CMD build

echo "üöÄ Iniciando servi√ßos..."
$DOCKER_COMPOSE_CMD up -d

# Aguardar servi√ßos iniciarem
echo "‚è≥ Aguardando servi√ßos inicializarem..."
sleep 30

# Verificar status dos servi√ßos
echo "üîç Verificando status dos servi√ßos..."
$DOCKER_COMPOSE_CMD ps

# Baixar modelo Ollama
echo "ü§ñ Configurando modelo Ollama..."
$DOCKER_COMPOSE_CMD exec -T ollama ollama pull llama2

# Teste de conectividade
echo "üîó Testando conectividade..."

# Testar API Gateway
if curl -s http://localhost:8080/health > /dev/null; then
    echo "‚úÖ API Gateway: OK"
else
    echo "‚ùå API Gateway: Falhou"
fi

# Testar Orchestrator
if curl -s http://localhost:3000/health > /dev/null; then
    echo "‚úÖ Orchestrator: OK"
else
    echo "‚ùå Orchestrator: Falhou"
fi

# Testar Agent 1
if curl -s http://localhost:3001/health > /dev/null; then
    echo "‚úÖ Agent 1: OK"
else
    echo "‚ùå Agent 1: Falhou"
fi

# Testar Agent 2
if curl -s http://localhost:3002/health > /dev/null; then
    echo "‚úÖ Agent 2: OK"
else
    echo "‚ùå Agent 2: Falhou"
fi

echo ""
echo "üéâ Sistema inicializado com sucesso!"
echo "======================================"
echo "üìñ Documenta√ß√£o da API: http://localhost:8080/api/docs"
echo "üìä Status do sistema: http://localhost:8080/api/system/status"
echo "üîê Login padr√£o: admin/admin123"
echo ""
echo "üõ†Ô∏è  Comandos √∫teis:"
echo "   $DOCKER_COMPOSE_CMD logs -f          # Ver logs em tempo real"
echo "   $DOCKER_COMPOSE_CMD stop             # Parar servi√ßos"
echo "   $DOCKER_COMPOSE_CMD down             # Parar e remover containers"
echo "   $DOCKER_COMPOSE_CMD restart          # Reiniciar servi√ßos"
echo ""
echo "üìã Exemplo de uso:"
echo "   # 1. Fazer login"
echo "   curl -X POST http://localhost:8080/api/auth/login \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"username\": \"admin\", \"password\": \"admin123\"}'"
echo ""
echo "   # 2. Usar o token retornado para processar tarefas"
echo "   curl -X POST http://localhost:8080/api/orchestrator/process \\"
echo "     -H 'Authorization: Bearer YOUR_TOKEN' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"task\": \"Explain quantum computing\", \"strategy\": \"parallel\"}'"
echo ""
